{"ast":null,"code":"import gsap from 'gsap';\nimport * as i0 from \"@angular/core\";\nexport class AppLoadingComponent {\n  constructor() {\n    this.loadingPercentage = 0;\n    this.displayPercentage = '0%';\n  }\n  ngOnInit() {\n    const totalDuration = 2; // Duration in seconds\n    const updateInterval = 20; // Update interval in milliseconds\n    const animation = gsap.to('.loading-fill', {\n      width: '100%',\n      duration: 2,\n      ease: 'power2.inOut',\n      onUpdate: () => {\n        // We should use the progress of the animation we created above\n        this.loadingPercentage = animation.progress() * 100;\n        this.displayPercentage = `${this.round(this.loadingPercentage)}%`;\n      }\n    });\n  }\n  ngAfterViewInit() {}\n  round(value) {\n    return Math.trunc(value);\n  }\n  static #_ = this.ɵfac = function AppLoadingComponent_Factory(t) {\n    return new (t || AppLoadingComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppLoadingComponent,\n    selectors: [[\"app-loading\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[1, \"loading\"], [1, \"loading-content\"], [1, \"loading-bar\"], [1, \"loading-fill\"], [1, \"counter\"]],\n    template: function AppLoadingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.displayPercentage);\n      }\n    },\n    styles: [\"\\n\\n.loading[_ngcontent-%COMP%] {\\n  min-height: 100vh;\\n  height: 100%;\\n  background-color: #1a1a1a;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n}\\n.loading[_ngcontent-%COMP%]   .loading-content[_ngcontent-%COMP%] {\\n  max-width: 40rem;\\n  width: 100%;\\n}\\n.loading[_ngcontent-%COMP%]   .loading-content[_ngcontent-%COMP%]   .loading-bar[_ngcontent-%COMP%] {\\n  height: 2px;\\n  width: 100%;\\n  position: relative;\\n  background: rgba(105, 105, 105, 0.5);\\n  z-index: 10;\\n}\\n.loading[_ngcontent-%COMP%]   .loading-content[_ngcontent-%COMP%]   .loading-bar[_ngcontent-%COMP%]   .loading-fill[_ngcontent-%COMP%] {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: 0%;\\n  height: 100%;\\n  background: #007bff;\\n  z-index: 11;\\n}\\n.loading[_ngcontent-%COMP%]   .loading-content[_ngcontent-%COMP%]   .counter[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n  text-align: start;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLWxvYWRpbmcvYXBwLWxvYWRpbmcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQUE7QUFFQTtFQUNJLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxzQkFBQTtBQUFKO0FBQ0k7RUFDSSxnQkFBQTtFQUNBLFdBQUE7QUFDUjtBQUFRO0VBQ0ksV0FBQTtFQUNBLFdBQUE7RUFDQSxrQkFBQTtFQUNBLG9DQUFBO0VBQ0EsV0FBQTtBQUVaO0FBRFk7RUFDSSxrQkFBQTtFQUNBLE9BQUE7RUFDQSxNQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7QUFHaEI7QUFBUTtFQUNJLGVBQUE7RUFDQSxpQkFBQTtBQUVaIiwic291cmNlc0NvbnRlbnQiOlsiLyogbG9hZGluZy5jb21wb25lbnQuY3NzICovXHJcblxyXG4ubG9hZGluZyB7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxYTFhMWE7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIC5sb2FkaW5nLWNvbnRlbnQge1xyXG4gICAgICAgIG1heC13aWR0aDogNDByZW07XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgLmxvYWRpbmctYmFyIHtcclxuICAgICAgICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMTA1LCAxMDUsIDEwNSwgMC41KTtcclxuICAgICAgICAgICAgei1pbmRleDogMTA7XHJcbiAgICAgICAgICAgIC5sb2FkaW5nLWZpbGwge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICAgICAgICAgIHRvcDogMDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDdiZmY7XHJcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAxMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAuY291bnRlciB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["gsap","AppLoadingComponent","constructor","loadingPercentage","displayPercentage","ngOnInit","totalDuration","updateInterval","animation","to","width","duration","ease","onUpdate","progress","round","ngAfterViewInit","value","Math","trunc","_","_2","selectors","decls","vars","consts","template","AppLoadingComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate"],"sources":["C:\\Users\\Kamal\\Desktop\\stephen\\landing-page\\src\\app\\app-loading\\app-loading.component.ts","C:\\Users\\Kamal\\Desktop\\stephen\\landing-page\\src\\app\\app-loading\\app-loading.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport gsap from 'gsap';\n\n@Component({\n  selector: 'app-loading',\n  templateUrl: './app-loading.component.html',\n  styleUrl: './app-loading.component.scss'\n})\nexport class AppLoadingComponent implements OnInit, AfterViewInit {\n\n  loadingPercentage: number = 0;\n  displayPercentage: string = '0%';\n\n  ngOnInit() {\n    const totalDuration = 2; // Duration in seconds\n    const updateInterval = 20; // Update interval in milliseconds\n\n    const animation = gsap.to('.loading-fill', {\n      width: '100%',\n      duration: 2,\n      ease: 'power2.inOut',\n      onUpdate: () => {\n        // We should use the progress of the animation we created above\n        this.loadingPercentage = animation.progress() * 100;\n        this.displayPercentage = `${this.round(this.loadingPercentage)}%`;\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n  }\n  round(value: number): number {\n    return Math.trunc(value);\n  }\n}\n","<div class=\"loading\">\n    <div class=\"loading-content\">\n        <div class=\"loading-bar\">\n            <div class=\"loading-fill\"></div>\n        </div>\n        <div class=\"counter\">{{ displayPercentage }}</div>\n    </div>\n</div>"],"mappings":"AACA,OAAOA,IAAI,MAAM,MAAM;;AAOvB,OAAM,MAAOC,mBAAmB;EALhCC,YAAA;IAOE,KAAAC,iBAAiB,GAAW,CAAC;IAC7B,KAAAC,iBAAiB,GAAW,IAAI;;EAEhCC,QAAQA,CAAA;IACN,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC;IACzB,MAAMC,cAAc,GAAG,EAAE,CAAC,CAAC;IAE3B,MAAMC,SAAS,GAAGR,IAAI,CAACS,EAAE,CAAC,eAAe,EAAE;MACzCC,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,cAAc;MACpBC,QAAQ,EAAEA,CAAA,KAAK;QACb;QACA,IAAI,CAACV,iBAAiB,GAAGK,SAAS,CAACM,QAAQ,EAAE,GAAG,GAAG;QACnD,IAAI,CAACV,iBAAiB,GAAG,GAAG,IAAI,CAACW,KAAK,CAAC,IAAI,CAACZ,iBAAiB,CAAC,GAAG;MACnE;KACD,CAAC;EACJ;EAEAa,eAAeA,CAAA,GACf;EACAD,KAAKA,CAACE,KAAa;IACjB,OAAOC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC;EAC1B;EAAC,QAAAG,CAAA,G;qBAzBUnB,mBAAmB;EAAA;EAAA,QAAAoB,EAAA,G;UAAnBpB,mBAAmB;IAAAqB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRhCE,EAAA,CAAAC,cAAA,aAAqB;QAGTD,EAAA,CAAAE,SAAA,aAAgC;QACpCF,EAAA,CAAAG,YAAA,EAAM;QACNH,EAAA,CAAAC,cAAA,aAAqB;QAAAD,EAAA,CAAAI,MAAA,GAAuB;QAAAJ,EAAA,CAAAG,YAAA,EAAM;;;QAA7BH,EAAA,CAAAK,SAAA,GAAuB;QAAvBL,EAAA,CAAAM,iBAAA,CAAAP,GAAA,CAAAzB,iBAAA,CAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}