{"ast":null,"code":"import { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport * as i0 from \"@angular/core\";\nexport class SectionAnimationsService {\n  constructor() {\n    // Register the ScrollTrigger plugin\n    gsap.registerPlugin(ScrollTrigger);\n  }\n  playSectionGlobalAnimation() {\n    // Target all elements with the class .section-title\n    const sections = document.querySelectorAll('.section-title');\n    sections.forEach(section => {\n      // Create a GSAP timeline for this section\n      const tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: section,\n          start: \"top center\",\n          end: \"bottom center\",\n          toggleActions: \"play none none none\"\n        },\n        defaults: {\n          duration: 0.5\n        }\n      });\n      // Get the content of the title for the scrambleText plugin\n      const originalTextElement = section.querySelector('.title');\n      const originalText = originalTextElement?.textContent ?? '';\n      const uniqueChars = Array.from(new Set(originalText.replace(/\\s/g, ''))).join('');\n      // Your existing animation code should target elements within this 'section'\n      tl.from(section.querySelector('.title-label'), {\n        opacity: 0\n      }).from(section.querySelector('.title'), {\n        opacity: 0\n      }, '-=0.2').from(section.querySelector('.line img'), {\n        width: 0,\n        opacity: 0\n      }, '-=0.5').from(section.querySelector('.img-sm'), {\n        scale: 0,\n        opacity: 0\n      }, '-=0.5').from(section.querySelectorAll('.para'), {\n        opacity: 0,\n        stagger: 0.2\n      }).from(section.querySelector('.btn-trans'), {\n        opacity: 0,\n        ease: 'elastic.out(1, 0.3)'\n      }).from(section.querySelector('.big-img'), {\n        x: 100,\n        opacity: 0,\n        stagger: 0.2\n      }).to(section.querySelector('.title'), {\n        duration: 2,\n        // Assuming scrambleText is a valid gsap plugin registered elsewhere\n        scrambleText: {\n          text: originalText,\n          chars: uniqueChars,\n          revealDelay: 0.2,\n          speed: 0.1\n        }\n      });\n      // The timeline does not need to be returned as it's self-contained\n    });\n  }\n  static #_ = this.ɵfac = function SectionAnimationsService_Factory(t) {\n    return new (t || SectionAnimationsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SectionAnimationsService,\n    factory: SectionAnimationsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["gsap","ScrollTrigger","SectionAnimationsService","constructor","registerPlugin","playSectionGlobalAnimation","sections","document","querySelectorAll","forEach","section","tl","timeline","scrollTrigger","trigger","start","end","toggleActions","defaults","duration","originalTextElement","querySelector","originalText","textContent","uniqueChars","Array","from","Set","replace","join","opacity","width","scale","stagger","ease","x","to","scrambleText","text","chars","revealDelay","speed","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Kamal\\Desktop\\stephen\\landing-page\\src\\app\\service\\section-animation.service.ts"],"sourcesContent":["// animations.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { gsap } from 'gsap';\r\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SectionAnimationsService {\r\n    constructor() {\r\n        // Register the ScrollTrigger plugin\r\n        gsap.registerPlugin(ScrollTrigger);\r\n    }\r\n   playSectionGlobalAnimation() {\r\n        // Target all elements with the class .section-title\r\n        const sections = document.querySelectorAll<HTMLElement>('.section-title');\r\n\r\n        sections.forEach((section) => {\r\n            // Create a GSAP timeline for this section\r\n            const tl = gsap.timeline({\r\n                scrollTrigger: {\r\n                    trigger: section,\r\n                    start: \"top center\",\r\n                    end: \"bottom center\",\r\n                    toggleActions: \"play none none none\"\r\n                },\r\n                defaults: { duration: 0.5 },\r\n            });\r\n\r\n            // Get the content of the title for the scrambleText plugin\r\n            const originalTextElement = section.querySelector('.title');\r\n            const originalText = originalTextElement?.textContent ?? '';\r\n            const uniqueChars = Array.from(new Set(originalText.replace(/\\s/g, ''))).join('');\r\n\r\n            // Your existing animation code should target elements within this 'section'\r\n            tl.from(section.querySelector('.title-label'), { opacity: 0 })\r\n                .from(section.querySelector('.title'), { opacity: 0 }, '-=0.2')\r\n                .from(section.querySelector('.line img'), { width: 0, opacity: 0 }, '-=0.5')\r\n                .from(section.querySelector('.img-sm'), { scale: 0, opacity: 0 }, '-=0.5')\r\n                .from(section.querySelectorAll('.para'), { opacity: 0, stagger: 0.2 })\r\n                .from(section.querySelector('.btn-trans'), { opacity: 0, ease: 'elastic.out(1, 0.3)' })\r\n                .from(section.querySelector('.big-img'), { x: 100, opacity: 0, stagger: 0.2 })\r\n                .to(section.querySelector('.title'), {\r\n                    duration: 2,\r\n                    // Assuming scrambleText is a valid gsap plugin registered elsewhere\r\n                    scrambleText: {\r\n                        text: originalText,\r\n                        chars: uniqueChars,\r\n                        revealDelay: 0.2,\r\n                        speed: 0.1,\r\n                    }\r\n                });\r\n            // The timeline does not need to be returned as it's self-contained\r\n        });\r\n    }\r\n\r\n}"],"mappings":"AAEA,SAASA,IAAI,QAAQ,MAAM;AAC3B,SAASC,aAAa,QAAQ,oBAAoB;;AAKlD,OAAM,MAAOC,wBAAwB;EACjCC,YAAA;IACI;IACAH,IAAI,CAACI,cAAc,CAACH,aAAa,CAAC;EACtC;EACDI,0BAA0BA,CAAA;IACrB;IACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAc,gBAAgB,CAAC;IAEzEF,QAAQ,CAACG,OAAO,CAAEC,OAAO,IAAI;MACzB;MACA,MAAMC,EAAE,GAAGX,IAAI,CAACY,QAAQ,CAAC;QACrBC,aAAa,EAAE;UACXC,OAAO,EAAEJ,OAAO;UAChBK,KAAK,EAAE,YAAY;UACnBC,GAAG,EAAE,eAAe;UACpBC,aAAa,EAAE;SAClB;QACDC,QAAQ,EAAE;UAAEC,QAAQ,EAAE;QAAG;OAC5B,CAAC;MAEF;MACA,MAAMC,mBAAmB,GAAGV,OAAO,CAACW,aAAa,CAAC,QAAQ,CAAC;MAC3D,MAAMC,YAAY,GAAGF,mBAAmB,EAAEG,WAAW,IAAI,EAAE;MAC3D,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACL,YAAY,CAACM,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAEjF;MACAlB,EAAE,CAACe,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,cAAc,CAAC,EAAE;QAAES,OAAO,EAAE;MAAC,CAAE,CAAC,CACzDJ,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,QAAQ,CAAC,EAAE;QAAES,OAAO,EAAE;MAAC,CAAE,EAAE,OAAO,CAAC,CAC9DJ,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,WAAW,CAAC,EAAE;QAAEU,KAAK,EAAE,CAAC;QAAED,OAAO,EAAE;MAAC,CAAE,EAAE,OAAO,CAAC,CAC3EJ,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,SAAS,CAAC,EAAE;QAAEW,KAAK,EAAE,CAAC;QAAEF,OAAO,EAAE;MAAC,CAAE,EAAE,OAAO,CAAC,CACzEJ,IAAI,CAAChB,OAAO,CAACF,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAAEsB,OAAO,EAAE,CAAC;QAAEG,OAAO,EAAE;MAAG,CAAE,CAAC,CACrEP,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,YAAY,CAAC,EAAE;QAAES,OAAO,EAAE,CAAC;QAAEI,IAAI,EAAE;MAAqB,CAAE,CAAC,CACtFR,IAAI,CAAChB,OAAO,CAACW,aAAa,CAAC,UAAU,CAAC,EAAE;QAAEc,CAAC,EAAE,GAAG;QAAEL,OAAO,EAAE,CAAC;QAAEG,OAAO,EAAE;MAAG,CAAE,CAAC,CAC7EG,EAAE,CAAC1B,OAAO,CAACW,aAAa,CAAC,QAAQ,CAAC,EAAE;QACjCF,QAAQ,EAAE,CAAC;QACX;QACAkB,YAAY,EAAE;UACVC,IAAI,EAAEhB,YAAY;UAClBiB,KAAK,EAAEf,WAAW;UAClBgB,WAAW,EAAE,GAAG;UAChBC,KAAK,EAAE;;OAEd,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EAAC,QAAAC,CAAA,G;qBA9CQxC,wBAAwB;EAAA;EAAA,QAAAyC,EAAA,G;WAAxBzC,wBAAwB;IAAA0C,OAAA,EAAxB1C,wBAAwB,CAAA2C,IAAA;IAAAC,UAAA,EAFrB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}